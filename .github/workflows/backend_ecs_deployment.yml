name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - 'ptlink-server/**'
      - '.github/workflows/backend_ecs_deployment.yml'

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-22.04
    env:
      ECS_CLUSTER: your-cluster-name
    defaults:
      run:
        working-directory: ${{ env.JAVA_PROJECT_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle 8.10.2
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.10.2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: inject environment variables to task-definition.json
        env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
              IMAGE_TAG: ${{ github.sha }}
        run: |
            sed -i -e 's/\${ECS_TASK_DEFINITION_NAME}/${{ env.ECS_TASK_DEFINITION_NAME }}/g' \
                    -e 's/\${ECS_CONTAINER_NAME}/${{ env.ECS_CONTAINER_NAME }}/g' \
                    -e 's/\${AWS_REGION}/${{ env.AWS_REGION }}/g' \
                    -e 's/\${ECS_IMAGE_URI}/$ECR_REGISTRY%$ECR_REPOSITORY:$IMAGE_TAG/g' ${{ env.ECS_TASK_DEFINITION_FILE }}

      - name: inject environment variables to appspec.json
        run: |
            sed -i -e 's/\${ECS_TASK_DEFINITION_NAME}/${{ env.ECS_TASK_DEFINITION_NAME }}/g' \
                    -e 's/\${ECS_CONTAINER_NAME}/${{ env.ECS_CONTAINER_NAME }}/g' \
                    -e 's/\${ECS_CAPACITY_PROVIDER}/${{ env.ECS_CAPACITY_PROVIDER }}/g' appspec.json

      - name: inject environment variables to application.properties
        run: |
            sed -i -e 's/\${AWS_RDS_DB_HOST}/${{ env.AWS_RDS_DB_HOST }}/g' \
                    -e 's/\${AWS_RDS_DB_PORT}/${{ env.AWS_RDS_DB_PORT }}/g' \
                    -e 's/\${AWS_RDS_DB_NAME}/${{ env.AWS_RDS_DB_NAME }}/g' \
                    -e 's/\${AWS_RDS_MASTER_USERNAME}/${{ env.AWS_RDS_MASTER_USERNAME }}/g' \
                    -e 's/\${AWS_RDS_MASTER_PASSWORD}/${{ env.AWS_RDS_MASTER_PASSWORD }}/g' src/main/resources/application.properties
    
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --provenance=false --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.JAVA_PROJECT_NAME }}/${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ env.JAVA_PROJECT_NAME }}/appspec.json
          codedeploy-application: AppECS-${{ env.ECS_CLUSTER }}-${{ env.ECS_SERVICE }}
          codedeploy-deployment-group: DgpECS-${{ env.ECS_CLUSTER }}-${{ env.ECS_SERVICE }}